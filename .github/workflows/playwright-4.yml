name: Playwright
run-name: ${{ github.workflow }} âœ… ${{ github.event_name}}
on:
  workflow_dispatch:
  workflow_call:
    outputs:
     playwright_outcome:
      description: "output_enviroment"
      value: ${{ jobs.test.outputs.output_enviroment }}
     grab3_outcome:
      description: "jobs.test.outputs.output_grab3"
      value: ${{ jobs.test.outputs.output_grab3 }}


jobs:
  test:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        test-group: [ chromium ] # chromium,firefox,webkit
    defaults:
      run:
        working-directory: ./playwright
    outputs:
      output_enviroment: ${{ steps.output_enviroment.outputs.playwright_outcome}}
      output_grab3: ${{ steps.output_enviroment.outputs.grab3_outcome}}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'latest'
      - name: Install dependencies
        run: npm install --save
      - name: Install Playwright Browsers
        run: |
         npx playwright install --with-deps ${{ matrix.test-group }}
         npx playwright install --help

      - name: playwright
        id: playwright
        run: |
         tree -h ${{ github.workspace }}/playwright/tests/
         npx playwright test ${{ github.workspace }}/playwright/tests/solocoo.spec.js --project ${{ matrix.test-group }} --trace=off --retries=0
         tree -h ${{ github.workspace }}/playwright/test-results/


      - name: enviroment
        id: enviroment
        run: |
         # echo "token_CZ = $token_CZ"
         echo "$token_CZ"
         # echo "${{ env.token_CZ }}"
         # echo "$(echo ${{ env.token_CZ}})"
         echo ----------------------------------
         # echo "token_SK = $token_SK"
         echo "$token_SK"
         # echo "${{ env.token_SK }}"
         # echo "$(echo ${{ env.token_SK}})"
         echo ----------------------------------
         # echo "token_CZ_output=${{ env.token_CZ }}" >> $GITHUB_OUTPUT
         # echo "token_SK_output=${{ env.token_SK }}" >> $GITHUB_OUTPUT

      - name: Run scripts
        if: steps.enviroment.outcome == 'success'
        id: scripts
        working-directory: ./epg-grabber
        run: |
          chmod +x ${{ github.workspace }}/epg-grabber/scripts/solocoo_list_curl.sh
          ${{ github.workspace }}/epg-grabber/scripts/solocoo_list_curl.sh
          tree -h ${{ github.workspace }}/playwright/test-results/


      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-${{ matrix.test-group }}
          path: |
            ${{ github.workspace }}/playwright/playwright-report/
            ${{ github.workspace }}/playwright/test-results/*.*
          retention-days: 30



      - name: output
        id: output_enviroment
        run: |
          # echo ${{ steps.enviroment.outputs.token_CZ_output }}
          # echo ${{ steps.enviroment.outputs.token_SK_output }}
          echo ${{ github.event_name }}
          echo ${{ steps.enviroment.outcome }}
          echo "playwright_outcome=${{ steps.enviroment.outcome }}" >> $GITHUB_OUTPUT
          echo ----------------------------------
          echo ${{ steps.grab3.outcome }}
          echo "grab3_outcome=${{ steps.grab3.outcome }}" >> $GITHUB_OUTPUT


      - name: Deploy
        if: steps.scripts.outcome == 'success'
        working-directory: ./epg-grabber
        run: |
          git config --global user.email ${{ secrets.EMAIL }}
          git config --global user.name ${{ secrets.NAME }}
          git config pull.rebase false
          git add ./csv/*.csv
          git add ./channels/*.xml
          git add ./guide/skylink.cz.guide.xml
          git commit -m "Playwright - ${{ steps.scripts.outcome }}" || echo
          git pull
          git push -f
